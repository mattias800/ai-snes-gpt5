const ipl = [
  0xcd, 0xef, 0xbd, 0xe8, 0x00, 0x00, 0x00, 0x00,
  0xc6, 0x1d, 0xd0, 0xfc, 0x8f, 0xaa, 0xf4, 0x8f,
  0xbb, 0xf5, 0x78, 0xcc, 0xf4, 0xd0, 0xfb, 0x2f,
  0x19, 0xeb, 0xfb, 0xd8, 0x00, 0x7e, 0xf0, 0x00,
  0xe4, 0xd0, 0xcb, 0xbd, 0xc0, 0x0b, 0xfd, 0xbf,
  0x3e, 0x3f, 0x1d, 0x1b, 0x3d, 0x4d, 0x7d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];

console.log('IPL ROM length:', ipl.length, 'bytes');
console.log('The IPL ROM should be 64 bytes with reset vector at the end');
console.log('However this IPL is all zeros at the end!');
console.log('');
console.log('Key IPL addresses (mapped at $FFC0-$FFFF):');
console.log('$FFC0: Entry point - should be the reset vector target');
console.log('$FFC0 starts with:', ipl.slice(0, 8).map(b => b.toString(16).padStart(2, '0')).join(' '));
console.log('');
console.log('Looking for the handshake setup code...');
console.log('At offset 0x0C (address $FFCC):', ipl[0x0C].toString(16).padStart(2, '0'), '- should be MOV $F4,#$AA (8F AA F4)');
console.log('At offset 0x0D-0x0E:', ipl.slice(0x0D, 0x0F).map(b => b.toString(16).padStart(2, '0')).join(' '));
console.log('At offset 0x0F (address $FFCF):', ipl[0x0F].toString(16).padStart(2, '0'), '- should be MOV $F5,#$BB (8F BB F5)');
console.log('At offset 0x10-0x11:', ipl.slice(0x10, 0x12).map(b => b.toString(16).padStart(2, '0')).join(' '));
